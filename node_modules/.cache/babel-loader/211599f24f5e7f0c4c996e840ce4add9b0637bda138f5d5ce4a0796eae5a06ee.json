{"ast":null,"code":"var _jsxFileName = \"C:\\\\himansu(files and assignments)\\\\React Realted\\\\react ROUTER practice\\\\09-time-to-practice-starting-code\\\\src\\\\components\\\\comments\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { redirect, useLoaderData, useParams } from \"react-router-dom\";\nimport { getAllComments, addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = () => {\n  _s();\n  const loadedComments = useLoaderData();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  // const params=useParams();\n  // const {sendRequest,status,data:loadedComments,error}=useHttp(getAllComments,true)\n\n  // const {quoteId}=params;\n\n  // useEffect(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  // const addCommentHandler=useCallback(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId]);\n\n  let comments;\n\n  // if(status==='pending')\n  // {\n  //   comments=<div className='centered'><LoadingSpinner></LoadingSpinner></div>\n  // }\n\n  if (loadedComments || loadedComments.length > 0) {\n    comments = /*#__PURE__*/_jsxDEV(CommentsList, {\n      comments: loadedComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  }\n  if (!loadedComments || loadedComments.length === 0) {\n    comments = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered\",\n      children: \"No Comments Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.comments,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), !isAddingComment && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: startAddCommentHandler,\n      children: \"Add a Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 28\n    }, this), isAddingComment && /*#__PURE__*/_jsxDEV(NewCommentForm, {\n      onClick: endAddCommentHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 27\n    }, this), comments]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Comments, \"LnwM8AKjpj41s5sOeDkXlJRkuvY=\", false, function () {\n  return [useLoaderData];\n});\n_c = Comments;\nexport default Comments;\nexport const action = async _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  const formData = await request.formData();\n  const quoteId = params.quoteId;\n  console.log(formData.get(\"text\"));\n  const post = {\n    commentData: {\n      text: formData.get(\"text\")\n    },\n    quoteId: quoteId\n  };\n  await addComment(post);\n  return redirect('');\n};\nexport const loader = _ref2 => {\n  let {\n    params\n  } = _ref2;\n  const quoteId = params.quoteId;\n  return getAllComments(quoteId);\n};\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useCallback","useEffect","useState","useHttp","classes","NewCommentForm","redirect","useLoaderData","useParams","getAllComments","addComment","LoadingSpinner","CommentsList","Comments","loadedComments","isAddingComment","setIsAddingComment","startAddCommentHandler","comments","length","endAddCommentHandler","action","request","params","formData","quoteId","console","log","get","post","commentData","text","loader"],"sources":["C:/himansu(files and assignments)/React Realted/react ROUTER practice/09-time-to-practice-starting-code/src/components/comments/Comments.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { redirect, useLoaderData, useParams } from \"react-router-dom\";\nimport { getAllComments, addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const loadedComments = useLoaderData();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  // const params=useParams();\n  // const {sendRequest,status,data:loadedComments,error}=useHttp(getAllComments,true)\n\n  // const {quoteId}=params;\n\n  // useEffect(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  // const addCommentHandler=useCallback(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId]);\n\n  \n\n  let comments;\n\n  // if(status==='pending')\n  // {\n  //   comments=<div className='centered'><LoadingSpinner></LoadingSpinner></div>\n  // }\n\n  if (loadedComments || loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments}></CommentsList>;\n  }\n\n  if (!loadedComments || loadedComments.length === 0) {\n    comments = <p className=\"centered\">No Comments Found</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && <button className=\"btn\" onClick={startAddCommentHandler}>\n        Add a Comment\n      </button>}\n      {isAddingComment && <NewCommentForm onClick={endAddCommentHandler}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n\nexport const action = async ({ request, params }) => {\n  const formData = await request.formData();\n  const quoteId = params.quoteId;\n  console.log(formData.get(\"text\"));\n  const post = {\n    commentData: { text: formData.get(\"text\") },\n    quoteId: quoteId,\n  };\n  await addComment(post);\n  return redirect('')\n};\n\nexport const loader = ({ params }) => {\n  const quoteId = params.quoteId;\n  return getAllComments(quoteId);\n};\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,QAAQ,EAAEC,aAAa,EAAEC,SAAS,QAAQ,kBAAkB;AACrE,SAASC,cAAc,EAAEC,UAAU,QAAQ,eAAe;AAC1D,OAAOC,cAAc,MAAM,sBAAsB;AACjD,OAAOC,YAAY,MAAM,gBAAgB;AAAC;AAE1C,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB,MAAMC,cAAc,GAAGP,aAAa,EAAE;EACtC,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7D;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA,MAAMe,sBAAsB,GAAG,MAAM;IACnCD,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;;EAED;EACA;EACA;;EAIA,IAAIE,QAAQ;;EAEZ;EACA;EACA;EACA;;EAEA,IAAIJ,cAAc,IAAIA,cAAc,CAACK,MAAM,GAAG,CAAC,EAAE;IAC/CD,QAAQ,gBAAG,QAAC,YAAY;MAAC,QAAQ,EAAEJ;IAAe;MAAA;MAAA;MAAA;IAAA,QAAgB;EACpE;EAEA,IAAI,CAACA,cAAc,IAAIA,cAAc,CAACK,MAAM,KAAK,CAAC,EAAE;IAClDD,QAAQ,gBAAG;MAAG,SAAS,EAAC,UAAU;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB;EAC1D;EAEA,oBACE;IAAS,SAAS,EAAEd,OAAO,CAACc,QAAS;IAAA,wBACnC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,EACrB,CAACH,eAAe,iBAAI;MAAQ,SAAS,EAAC,KAAK;MAAC,OAAO,EAAEE,sBAAuB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEpE,EACRF,eAAe,iBAAI,QAAC,cAAc;MAAC,OAAO,EAAEK;IAAqB;MAAA;MAAA;MAAA;IAAA,QAAE,EACnEF,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEd,CAAC;AAAC,GA/CIL,QAAQ;EAAA,QACWN,aAAa;AAAA;AAAA,KADhCM,QAAQ;AAiDd,eAAeA,QAAQ;AAEvB,OAAO,MAAMQ,MAAM,GAAG,cAA+B;EAAA,IAAxB;IAAEC,OAAO;IAAEC;EAAO,CAAC;EAC9C,MAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACE,QAAQ,EAAE;EACzC,MAAMC,OAAO,GAAGF,MAAM,CAACE,OAAO;EAC9BC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,GAAG,CAAC,MAAM,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAG;IACXC,WAAW,EAAE;MAAEC,IAAI,EAAEP,QAAQ,CAACI,GAAG,CAAC,MAAM;IAAE,CAAC;IAC3CH,OAAO,EAAEA;EACX,CAAC;EACD,MAAMf,UAAU,CAACmB,IAAI,CAAC;EACtB,OAAOvB,QAAQ,CAAC,EAAE,CAAC;AACrB,CAAC;AAED,OAAO,MAAM0B,MAAM,GAAG,SAAgB;EAAA,IAAf;IAAET;EAAO,CAAC;EAC/B,MAAME,OAAO,GAAGF,MAAM,CAACE,OAAO;EAC9B,OAAOhB,cAAc,CAACgB,OAAO,CAAC;AAChC,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}