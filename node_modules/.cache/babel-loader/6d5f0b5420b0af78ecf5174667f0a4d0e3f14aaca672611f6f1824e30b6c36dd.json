{"ast":null,"code":"var _jsxFileName = \"C:\\\\himansu(files and assignments)\\\\React Realted\\\\react ROUTER practice\\\\09-time-to-practice-starting-code\\\\src\\\\components\\\\comments\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport { redirect, useLoaderData, useParams } from 'react-router-dom';\nimport { getAllComments, addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = () => {\n  _s();\n  // const [isAddingComment, setIsAddingComment] = useState(false);\n  // const params=useParams();\n  // const {sendRequest,status,data:loadedComments,error}=useHttp(getAllComments,true)\n\n  // const {quoteId}=params;\n\n  // useEffect(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId])\n\n  // const startAddCommentHandler = () => {\n  //   setIsAddingComment(true);\n  // };\n\n  // const addCommentHandler=useCallback(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId]);\n\n  const loadedComments = useLoaderData();\n  let comments;\n\n  // if(status==='pending')\n  // {\n  //   comments=<div className='centered'><LoadingSpinner></LoadingSpinner></div>\n  // }\n\n  if (loadedComments || loadedComments.length > 0) {\n    comments = /*#__PURE__*/_jsxDEV(CommentsList, {\n      comments: loadedComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 14\n    }, this);\n  }\n  if (!loadedComments || loadedComments.length === 0) {\n    comments = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered\",\n      children: \"No Comments Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.comments,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: startAddCommentHandler,\n      children: \"Add a Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(NewCommentForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), comments]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Comments, \"uB0OxOgocvFQ31kAJobKx2xKns4=\", false, function () {\n  return [useLoaderData];\n});\n_c = Comments;\nexport default Comments;\nexport const action = async _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  const formData = await request.formData();\n  const quoteId = params.quoteId;\n  console.log(formData.get('text'));\n  const post = {\n    commentData: {\n      text: formData.get('text')\n    },\n    quoteId: quoteId\n  };\n  await addComment(post);\n};\nexport const loader = _ref2 => {\n  let {\n    params\n  } = _ref2;\n  const quoteId = params.quoteId;\n  return getAllComments(quoteId);\n};\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useCallback","useEffect","useState","useHttp","classes","NewCommentForm","redirect","useLoaderData","useParams","getAllComments","addComment","LoadingSpinner","CommentsList","Comments","loadedComments","comments","length","startAddCommentHandler","action","request","params","formData","quoteId","console","log","get","post","commentData","text","loader"],"sources":["C:/himansu(files and assignments)/React Realted/react ROUTER practice/09-time-to-practice-starting-code/src/components/comments/Comments.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport { redirect, useLoaderData, useParams } from 'react-router-dom';\nimport { getAllComments,addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList'\n\nconst Comments = () => {\n  // const [isAddingComment, setIsAddingComment] = useState(false);\n  // const params=useParams();\n  // const {sendRequest,status,data:loadedComments,error}=useHttp(getAllComments,true)\n\n  // const {quoteId}=params;\n\n  // useEffect(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId])\n\n  // const startAddCommentHandler = () => {\n  //   setIsAddingComment(true);\n  // };\n\n  // const addCommentHandler=useCallback(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId]);\n\n  const loadedComments=useLoaderData();\n\n  let comments;\n\n  // if(status==='pending')\n  // {\n  //   comments=<div className='centered'><LoadingSpinner></LoadingSpinner></div>\n  // }\n\n  if((loadedComments||loadedComments.length>0))\n  {\n    comments=<CommentsList comments={loadedComments}></CommentsList>\n  }\n\n  if((!loadedComments || loadedComments.length===0))\n  {\n    comments = <p className='centered'>No Comments Found</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n          <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      <NewCommentForm />\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n\nexport const action=async ({request,params})=>{\n  const formData=await request.formData();\n  const quoteId=params.quoteId;\n  console.log(formData.get('text'))\n  const post={\n    commentData: {text:formData.get('text')}, \n    quoteId: quoteId \n  }\n  await addComment(post);\n}\n\nexport const loader=({params})=>{\n  const quoteId=params.quoteId\n  return getAllComments(quoteId);\n}\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,QAAQ,EAAEC,aAAa,EAAEC,SAAS,QAAQ,kBAAkB;AACrE,SAASC,cAAc,EAACC,UAAU,QAAQ,eAAe;AACzD,OAAOC,cAAc,MAAM,sBAAsB;AACjD,OAAOC,YAAY,MAAM,gBAAgB;AAAA;AAEzC,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,MAAMC,cAAc,GAACP,aAAa,EAAE;EAEpC,IAAIQ,QAAQ;;EAEZ;EACA;EACA;EACA;;EAEA,IAAID,cAAc,IAAEA,cAAc,CAACE,MAAM,GAAC,CAAC,EAC3C;IACED,QAAQ,gBAAC,QAAC,YAAY;MAAC,QAAQ,EAAED;IAAe;MAAA;MAAA;MAAA;IAAA,QAAgB;EAClE;EAEA,IAAI,CAACA,cAAc,IAAIA,cAAc,CAACE,MAAM,KAAG,CAAC,EAChD;IACED,QAAQ,gBAAG;MAAG,SAAS,EAAC,UAAU;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB;EAC1D;EAEA,oBACE;IAAS,SAAS,EAAEX,OAAO,CAACW,QAAS;IAAA,wBACnC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,eAClB;MAAQ,SAAS,EAAC,KAAK;MAAC,OAAO,EAAEE,sBAAuB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEjD,eACX,QAAC,cAAc;MAAA;MAAA;MAAA;IAAA,QAAG,EACjBF,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEd,CAAC;AAAC,GAhDIF,QAAQ;EAAA,QAmBSN,aAAa;AAAA;AAAA,KAnB9BM,QAAQ;AAkDd,eAAeA,QAAQ;AAEvB,OAAO,MAAMK,MAAM,GAAC,cAA0B;EAAA,IAAnB;IAACC,OAAO;IAACC;EAAM,CAAC;EACzC,MAAMC,QAAQ,GAAC,MAAMF,OAAO,CAACE,QAAQ,EAAE;EACvC,MAAMC,OAAO,GAACF,MAAM,CAACE,OAAO;EAC5BC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,GAAG,CAAC,MAAM,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAC;IACTC,WAAW,EAAE;MAACC,IAAI,EAACP,QAAQ,CAACI,GAAG,CAAC,MAAM;IAAC,CAAC;IACxCH,OAAO,EAAEA;EACX,CAAC;EACD,MAAMZ,UAAU,CAACgB,IAAI,CAAC;AACxB,CAAC;AAED,OAAO,MAAMG,MAAM,GAAC,SAAY;EAAA,IAAX;IAACT;EAAM,CAAC;EAC3B,MAAME,OAAO,GAACF,MAAM,CAACE,OAAO;EAC5B,OAAOb,cAAc,CAACa,OAAO,CAAC;AAChC,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}