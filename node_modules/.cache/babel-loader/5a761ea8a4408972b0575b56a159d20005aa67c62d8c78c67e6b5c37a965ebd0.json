{"ast":null,"code":"var _jsxFileName = \"C:\\\\himansu(files and assignments)\\\\React Realted\\\\react ROUTER practice\\\\09-time-to-practice-starting-code\\\\src\\\\pages\\\\QuoteDetails.js\";\nimport { Route, useParams, Link, useRouteMatch, Outlet } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuoteDetails = () => {\n  // const {sendRequest,status,data: loadedQuote,error}=useHttp(getSingleQuote,true);\n\n  // // const match=useRouteMatch();\n  // const params = useParams();\n\n  // // console.log(match);\n\n  // const {quoteId}=params;\n\n  // useEffect(()=>{\n  //   sendRequest(quoteId)\n  // },[sendRequest,quoteId])\n\n  // if(status==='pending')\n  // {\n  //   return <div className=\"centered\"><LoadingSpinner></LoadingSpinner></div>\n  // }\n\n  // if(error)\n  // {\n  //     return <p className=\"centered focused\">{error}</p>\n  // }\n\n  if (!loadedQuote.text) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered\",\n      children: \"No Quote Found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: loadedQuote.text,\n      author: loadedQuote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_c = QuoteDetails;\nexport default QuoteDetails;\nexport const loader = _ref => {\n  let {\n    params\n  } = _ref;\n  return getSingleQuote(params);\n};\nvar _c;\n$RefreshReg$(_c, \"QuoteDetails\");","map":{"version":3,"names":["Route","useParams","Link","useRouteMatch","Outlet","Comments","HighlightedQuote","useHttp","getSingleQuote","useEffect","LoadingSpinner","QuoteDetails","loadedQuote","text","author","loader","params"],"sources":["C:/himansu(files and assignments)/React Realted/react ROUTER practice/09-time-to-practice-starting-code/src/pages/QuoteDetails.js"],"sourcesContent":["import { Route, useParams, Link,useRouteMatch,Outlet } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport { useEffect } from \"react\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetails = () => {\r\n\r\n  // const {sendRequest,status,data: loadedQuote,error}=useHttp(getSingleQuote,true);\r\n\r\n  // // const match=useRouteMatch();\r\n  // const params = useParams();\r\n\r\n  // // console.log(match);\r\n\r\n  // const {quoteId}=params;\r\n\r\n  // useEffect(()=>{\r\n  //   sendRequest(quoteId)\r\n  // },[sendRequest,quoteId])\r\n\r\n  // if(status==='pending')\r\n  // {\r\n  //   return <div className=\"centered\"><LoadingSpinner></LoadingSpinner></div>\r\n  // }\r\n\r\n  // if(error)\r\n  // {\r\n  //     return <p className=\"centered focused\">{error}</p>\r\n  // }\r\n\r\n  if(!loadedQuote.text)\r\n  {\r\n    return <p className=\"centered\">No Quote Found!</p>\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <HighlightedQuote\r\n        text={loadedQuote.text}\r\n        author={loadedQuote.author}\r\n      ></HighlightedQuote>\r\n      <Outlet></Outlet>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;\r\n\r\nexport const loader=({params})=>{\r\n  return getSingleQuote(params)\r\n}\r\n"],"mappings":";AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,IAAI,EAACC,aAAa,EAACC,MAAM,QAAQ,kBAAkB;AAC9E,OAAOC,QAAQ,MAAM,iCAAiC;AACtD,OAAOC,gBAAgB,MAAM,uCAAuC;AACpE,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,cAAc,MAAM,iCAAiC;AAAC;AAE7D,MAAMC,YAAY,GAAG,MAAM;EAEzB;;EAEA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,IAAG,CAACC,WAAW,CAACC,IAAI,EACpB;IACE,oBAAO;MAAG,SAAS,EAAC,UAAU;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoB;EACpD;EAEA,oBACE;IAAA,wBACE,QAAC,gBAAgB;MACf,IAAI,EAAED,WAAW,CAACC,IAAK;MACvB,MAAM,EAAED,WAAW,CAACE;IAAO;MAAA;MAAA;MAAA;IAAA,QACT,eACpB,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAU;EAAA;IAAA;IAAA;IAAA;EAAA,QACT;AAEd,CAAC;AAAC,KAvCIH,YAAY;AAyClB,eAAeA,YAAY;AAE3B,OAAO,MAAMI,MAAM,GAAC,QAAY;EAAA,IAAX;IAACC;EAAM,CAAC;EAC3B,OAAOR,cAAc,CAACQ,MAAM,CAAC;AAC/B,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}